# encoding: utf-8
from ckan.lib.helpers import url_for_static_or_external, check_access
from ckan.common import _, g, c
import ckan.logic as logic
import logging
import os
import json

log = logging.getLogger()


def get_all_package_downloads(pkg_dict):
    """
    Get all the urls of resources the user has access to in the package.
    """
    file_urls = []
    for res in pkg_dict['resources']:
        can_access_res = check_access(
            'resource_show',
            {'id': res['id'], 'resource': res}
        )
        if can_access_res and res.get('url'):
            file_urls.append(res.get('url'))

    for res in get_autogenerated_resources(pkg_dict):
        file_urls.append(res['link'])

    return json.dumps(file_urls)


def get_logo_path(logo_filename, language):
    """
    Returns the URL for static content that requires localization.
    """
    log.debug("Called get_logo_path")
    log.debug("Logo filename: {}".format(logo_filename))
    log.debug("Language: {}".format(language))

    current_directory = os.path.dirname(
        os.path.abspath(__file__)
    )
    public_directory = current_directory + "/theme/public"
    localised_logo_filename = "/{}_{}".format(language, logo_filename[1:])
    localised_logo_path = public_directory + localised_logo_filename

    log.debug("Localised logo path: {}".format(localised_logo_path))

    if os.path.exists(localised_logo_path):
        return url_for_static_or_external(localised_logo_filename)
    else:
        return url_for_static_or_external(logo_filename)


def get_autogenerated_resources(pkg):
    """
    Identify which pre-specified resources are defined in the package
    schema but currently missing from the actual package. Return the
    details of those missing resources. A pre-specified resource is
    defined in the package schema e.g a HIVE package should contain ART
    data, ANC data and SVY data.
    """

    autogenerated_resources = []

    if pkg['type'] == 'geographic-data-package':

        uploaded_resources = [x['resource_type'] for x in pkg.get('resources')]
        required_resources = ['geographic-location-hierarchy', 'geographic-regional-geometry']

        if set(required_resources) <= set(uploaded_resources):
            autogenerated_resources.append({
                'name': _('Naomi Geographic Data Input'),
                'about': _('Geographic data formatted for the Naomi model.'),
                'link': '/validation/geodata/' + pkg['id'],
                'format': 'geojson'
            })

    return autogenerated_resources


def get_user_obj(field=""):
    """
    Returns an attribute of the user object, or returns the whole user object.
    """
    return getattr(g.userobj, field, g.userobj)


def check_organization_update_access(organization_id):
    user_organizations = \
        logic.get_action('organization_list_for_user')\
        ({'user': c.user}, {})
    valid = str(organization_id) in [
        str(org['id'])
        for org in user_organizations
        if org['capacity'] in ['admin', 'editor']
    ]
    return valid